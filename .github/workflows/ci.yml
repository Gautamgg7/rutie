name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  TEST_ALL: false # Set this to true for testing the entire matrix

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable] #  rust: [stable, beta]
        ruby_version: ["2.5.9", "2.6.8", "2.7.4"]
        ruby_static: [false, true]
        exclude:
          - os: windows-latest
            ruby_static: true
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
      CI_STDERR_LOG: true
      BUILD_RUBY_VERSION: ${{ matrix.ruby_version }}
      RUBY_STATIC: ${{ matrix.ruby_static }}

    continue-on-error: ${{ matrix.ruby_static }}

    steps:
    - name: Checkout
      if: env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false)
      uses: actions/checkout@v2

    - name: Import RVM public keys
      if: (runner.os != 'Windows') && (env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false))
      run: |
        curl -sSL https://rvm.io/mpapis.asc | gpg --import -
        curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -

    - name: Install RVM
      if: (runner.os != 'Windows') && (env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false))
      run: |
        curl -sSL https://get.rvm.io | bash -s stable --ruby
        source ~/.rvm/scripts/rvm
        rvm --version

    - name: Setup Ruby
      if: env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby_version }}
        bundler-cache: true

    - name: Install dependencies
      if: (runner.os != 'Windows') && (env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false))
      run: |
        if [[ "$BUILD_RUBY_VERSION" == "2.4"* ]] && [[ "$RUNNER_OS" == "Linux" ]]; then
          RVM_OPTS+=("--disable-binary")
        fi

        if [ ! -z "$RUBY_STATIC" ]; then
          RVM_OPTS+=("--disable-shared")
        fi

        if [ ${#RVM_OPTS[@]} -eq 0 ]; then
          RVM_CMD="rvm install $BUILD_RUBY_VERSION"
        else
          RVM_CMD="rvm install ${RVM_OPTS[@]} $BUILD_RUBY_VERSION"
        fi

        echo "Running: $RVM_CMD"
        eval $RVM_CMD

        source "$HOME/.rvm/scripts/rvm"
        rvm use "$BUILD_RUBY_VERSION"

    - name: Setup Rust
      if: env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Build and Test
      if: env.TEST_ALL || (env.TEST_ALL == false && matrix.ruby_version == '2.7.4' && matrix.rust == 'stable' && matrix.ruby_static == false)
      run: |
        cargo build -vv &&
        cargo test -vv

    # - name: After script
    #   run: |
    #     cat target/debug/build/rutie-*/output
    #     cat target/debug/build/rutie-*/stderr
